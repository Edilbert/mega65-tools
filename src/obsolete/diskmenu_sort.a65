
;-------------------------------------------------------------------------------
sortNames:
;-------------------------------------------------------------------------------
;	Sort list of disk names

;	start by setting pointer of compare to the newly added item
		LDA 	diskPointer
		STA 	sortPointer
		LDA 	diskPointer + 1
		STA 	sortPointer + 1

;	return if list is empty
;	If  sortPointer = diskNameArray then return else continue
		LDA	#>diskNameArray 
		CMP	sortPointer + 1
		BNE	@cont
		LDA	#<diskNameArray
		CMP	sortPointer
		BNE	@cont
@exit:
		RTS

@cont:
		LDA	#$00
		STA	fHadPos
		STA	lastSortPos 
		STA	lastSortPos + 1

nameLoop:
;	Now do sortpointer-- to make it point to the item before the new one.
		JSR 	sortPointer_minus_minus
		
;**************************************************
	.if	DEBUG_SORT
		LDA	#$00
		STA	cmdNmPos
		LDA	#$00
		STA	cmdNmLen
		
		LDA	#'-'
		JSR	appendCmdNm
		LDA	#'-'
		JSR	appendCmdNm
		
		LDA	sortPointer
		STA	VALUE
		JSR	PRTBYT
		
		LDA	#'-'
		JSR	appendCmdNm
		LDA	#'-'
		JSR	appendCmdNm
		
		LDX 	#$00
@loop:	
		LDA 	cmdNameTS, X
		JSR 	asciiToCharROM
		ORA 	#$80
		STA 	$07C0, X
		INX
		CPX	cmdNmLen
		BNE	@loop
		
				
		JSR	waitTwoSeconds
		JSR	waitTwoSeconds
	.endif
;**************************************************

;	If we hit before start of the list, then check swap
;	If sortPointer < diskNameArray then done
		LDA	sortPointer + 1
		CMP	#>diskNameArray
		BCC	@check
		BNE	@cont
		LDA	sortPointer
		CMP	#<diskNameArray
		BCC	@check
@cont:
;	Now iterate through the strings, to work out where the new string should 
;	be inserted (search until one is less). 
		JSR 	compareNames
		BEQ 	@tstCont
	
		LDA	#$01
		STA	fHadPos
	
		LDA	sortPointer
		STA	lastSortPos
		LDA	sortPointer + 1		
		STA	lastSortPos + 1
		
		JMP	nameLoop
		
@tstCont:
		LDA	fHadPos
		CMP	#$01
		BNE	nameLoop
		
@check:
		LDA	lastSortPos + 1
		BEQ	@done
		
		LDA	lastSortPos
		STA	sortPointer
		LDA	lastSortPos + 1
		STA	sortPointer + 1	
		
		JMP	doInsertNameHere

@done:
		RTS

doInsertNameHere:
;**************************************************
	.if	DEBUG_SORT
		LDA	#$00
		STA	cmdNmPos
		LDA	#$00
		STA	cmdNmLen
		
		LDA	#'!'
		JSR	appendCmdNm
		LDA	#'!'
		JSR	appendCmdNm
		
		LDA	sortPointer
		STA	VALUE
		JSR	PRTBYT
		
		LDA	#'!'
		JSR	appendCmdNm
		LDA	#'!'
		JSR	appendCmdNm
		
		LDX 	#$00
@loop:	
		LDA 	cmdNameTS, X
		JSR 	asciiToCharROM
		ORA 	#$80
		STA 	$07C0, X
		INX
		CPX	cmdNmLen
		BNE	@loop
		
				
		JSR	waitTwoSeconds
		JSR	waitTwoSeconds
	.endif
;**************************************************

;	Save the name at [diskpointer,diskpointer+$0f]
		LDY 	#$0F
din1:	
		LDA 	(diskPointer), Y
		STA 	nameTemp, Y
		DEY
		BPL 	din1

;	Set source as diskpointer - 1
		SEC
		LDA 	diskPointer
		SBC 	#$01
		STA 	sortDmaSrc
		LDA 	diskPointer + 1
		SBC 	#$00
		STA 	sortDmaSrc + 1
		
;	Set destination as diskpointer + $0F
		CLC
		LDA 	diskPointer
		ADC 	#$0F
		STA 	sortDmaDst
		LDA 	diskPointer + 1
		ADC 	#$00
		STA 	sortDmaDst + 1

;	Set the copy length to diskpointer-sortpointer bytes.
		LDA 	diskPointer
		SEC
		SBC 	sortPointer
		STA 	sortDmaCnt
		LDA 	diskPointer + 1
		SBC	sortPointer + 1
		STA 	sortDmaCnt + 1
				
;**************************************************
	.if	DEBUG_SORT
		LDA	#$00
		STA	cmdNmPos
		LDA	#$00
		STA	cmdNmLen
		
		LDA	sortDmaSrc
		STA	VALUE
		JSR	PRTBYT
		
		LDA	#':'
		JSR	appendCmdNm
		
		LDA	sortDmaDst
		STA	VALUE
		JSR	PRTBYT
		
		LDA	#':'
		JSR	appendCmdNm
		
		LDA	sortDmaCnt
		STA	VALUE
		JSR	PRTBYT

		LDA	#':'
		JSR	appendCmdNm
		
		LDX 	#$00
@loop:	
		LDA 	cmdNameTS, X
		JSR 	asciiToCharROM
		ORA 	#$80
		STA 	$07C0, X
		INX
		CPX	cmdNmLen
		BNE	@loop
		
				
		JSR	waitTwoSeconds
		JSR	waitTwoSeconds
	.endif
;**************************************************




;**************************************************
	.if	USE_DMAGIC
;	Ask DMAgic to do the transfer.
;	(clear DMAgic src/dst MB values, since the list lives in the first 1MB
;	address space)
		LDA 	#$00
		STA 	$D702
		STA 	$D704
		STA 	$D705
		STA 	$D706
		LDA 	#>sortDmaList
		STA 	$D701
		LDA 	#<sortDmaList
		STA 	$D700

	.else
;	Set sortpointer as source address ...
; 	... and set destination to source + $10
		LDA 	sortPointer
		STA 	sortDmaSrc
		CLC
		ADC 	#$10
		STA 	sortDmaDst
		LDA 	sortPointer + 1
		STA 	sortDmaSrc + 1
		ADC 	#$00
		STA 	sortDmaDst + 1

;	Set the copy length to diskpointer-sortpointer bytes.
		LDA 	diskPointer
		SEC
		SBC 	sortPointer
		STA 	sortDmaCnt
		LDA 	diskPointer + 1
		SBC	sortPointer + 1
		STA 	sortDmaCnt + 1
		
		LDA	sortDmaSrc
		STA	$4B
		LDA	sortDmaSrc + 1
		STA	$4C
		LDA	sortDmaDst
		STA	$4D
		LDA	sortDmaDst + 1
		STA	$4E
		
		LDY	sortDmaCnt
		DEY
@loop1:
		LDA	($4B), Y
		STA	($4D), Y
		DEY
		BPL	@loop1
	.endif
;**************************************************


;	Now copy the saved entry to sortpointer
		LDY 	#$0F
din2:	
		LDA 	nameTemp, Y
		STA 	(sortPointer), Y
		DEY
		BPL 	din2 

;	Now we are all done

		RTS

sortDmaList:	
	.byte 		$00 			; copy non-chained job 
sortDmaCnt:		
	.word 		$0001 			; number of bytes to copy
sortDmaSrc:		
	.word 		$0000 			; source address
	.byte 		$40 			; source bank number / direction
sortDmaDst:		
	.word 		$0000 			; destination address
	.byte 		$40 			; destination bank number / direction
	.word 		$0000 			; modulo
nameTemp:	
	.byte 		0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
lastSortPos:
	.word		$0000
fHadPos:
	.byte		$00



; To sort the names of disks, we first need a routine to compare the names of
; two disks, and indicate which is the lesser.
compareNames:
		LDY 	#$00
cnl:
;**************************************************
	.if	DEBUG_SORT
		PHY
	
		LDA	#$00
		STA	cmdNmPos
		LDA	#$00
		STA	cmdNmLen
		
		LDA	#'?'
		JSR	appendCmdNm
		
		LDA	(diskPointer), Y
		JSR	appendCmdNm
	
		LDA	#'?'
		JSR	appendCmdNm

		LDA	(sortPointer), Y
		JSR	appendCmdNm

		LDA	#'?'
		JSR	appendCmdNm
		
		LDX 	#$00
@loop:	
		LDA 	cmdNameTS, X
		JSR 	asciiToCharROM
		ORA 	#$80
		STA 	$07C0, X
		INX
		CPX	cmdNmLen
		BNE	@loop
		
		JSR	waitTwoSeconds
		JSR	waitTwoSeconds
		
		PLY
	.endif
;**************************************************


		LDA 	(diskPointer), Y
		CMP 	(sortPointer), Y
;dengland
;	BCS actually gives us >= not just >
;		BEQ	@cont
;		BCS 	cn_gt
;		BNE 	cn_lt

		BCC	cn_lt
		BEQ	@cont
		BCS	cn_gt

;	chars equal
@cont:
		INY
		CPY 	#$10
		BNE 	cnl
		
;	names match
	
cn_gt:	
;	name @ diskpointer > name @ sortpointer so don't swap
		LDA 	#$00
		RTS
		
cn_lt:	
;	 name @ diskpointer < name @ sortpointer so no need to swap
		LDA 	#$01
		RTS

;  Make sortpointer point to the previous entry in the list
sortPointer_minus_minus:
		SEC
		LDA 	sortPointer
		SBC 	#$10
		STA 	sortPointer
		LDA 	sortPointer + 1
		SBC 	#$00
		STA 	sortPointer + 1
		RTS
